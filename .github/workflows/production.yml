name: Deploy Production - Surge

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
  contents: write

env:
  ID_NUMBER: ${{ github.run_number }} / ${{ github.event_name }}
  SURGE_DOMAIN: ci-test-website.surge.sh

jobs:
  build-and-deploy-surge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci --silent
      - name: Build website
        env:
          URL_PRODUCTION: https://${{ env.SURGE_DOMAIN }}
          BASE_URL: /
        run: |
          npm run build --if-present
          npm install -g surge

      - name: Deploy to surge -> ${{ env.SURGE_DOMAIN }}
        run: surge --project ./build --token ${{ secrets.SURGE_TOKEN }} --domain ${{ env.SURGE_DOMAIN }}

  create_release:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-surge]
    steps:
      - uses: actions/github-script@v6.3.3
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: 'Production Deploy',
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: 'deploy',
              });
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
